
                                                                SORTING
___________________________________________________________________________________________________________________________________________

🔁 BUBBLE SORT : Repeatedly swap adjacent elements if they are in the wrong order.

(1) Sort an array using bubble sort ?

intput :
int [] arr = {5, 1, 4, 2, 8};
output : 1, 2, 4, 5, 8

(2) Sort in descending order ?

intput :
int [] arr = {3, 7, 2};
output : 7, 3, 2

(3) Sort array with duplicates ?

intput :
int [] arr = {4, 5, 4, 2};
output : 2, 4, 4, 5

(4) Sort already sorted array ?

intput :
int [] arr = {1, 2, 3, 4};
output : 1, 2, 3, 4

(5) Sort with one element ?

intput :
int [] arr = {10};
output : 10


🎯 SELECTION SORT: Find the smallest number and move it to the front, again and again.

(1) Sort an array using selection sort?

intput :
int [] arr = {64, 25, 12, 22, 11};
output : 11, 12, 22, 25, 64

(2) Sort descending ?

intput :
int [] arr = {5, 3, 6};
output : 6, 5, 3

(3) Sort with negative numbers ?

intput :
int [] arr = {-1, 3, -2, 0};
output : -2, -1, 0, 3

(4) Sort repeated elements ?

intput :
int [] arr = {2, 2, 1, 1};
output : 1, 1, 2, 2

(5) Sort array with 0s and 1s ?

intput :
int [] arr = {0, 1, 0, 1, 1};
output : 0, 0, 1, 1, 1



🪜 INSERTION SORT  : Take one number at a time and insert it into the correct position in the sorted part.

(1) Sort an array?

intput :
int [] arr = {12, 11, 13, 5, 6};
output : 5, 6, 11, 12, 13

(2) Sort nearly sorted array ?

intput :
int [] arr = {1, 2, 4, 3, 5};
output : 1, 2, 3, 4, 5

(3) Sort string as character array ?

input : 
char [] arr = {'d', 'b', 'a'};
output : 'a', 'b', 'd'

(4) Sort array with 1 element ?

intput :
int [] arr = {9};
output : 9

(5) Sort with mix numbers ?

intput :
int [] arr = {3, -1, 2, 0};
output : -1, 0, 2, 3



🔀 MERGE SORT : Keep dividing the array into halves, sort them, and then merge them back together.

(1) Sort using merge sort ?

intput :
int [] arr = {38, 27, 43, 3, 9};
output : 3, 9, 27, 38, 43

(2) Sort string of letters ?

input : 
char [] arr = {'z', 'a', 'b', 'c'};
output : 'a', 'b', 'c', 'z'

(3) Merge two sorted arrays ?

intput :
int [] arr1 = {1,3};
int [] arr2 = {2,4};
output : 1,2,3,4

(4) Sort negative and positive ?

intput :
int [] arr1 = {5, -3, 8, 0, -1};
output : -3, -1, 0, 5, 8

(5) Sort large input ?

intput :
int [] arr1 = {1000, 500, 250, 750};
output : 250, 500, 750, 1000




⚡ QUICK SORT : Pick a number (pivot), put smaller numbers on left and bigger on right, then repeat for both sides

(1) Sort array using quick sort ?








                                                                SEARCHING
_____________________________________________________________________________________________________________________________________________

                                                             🔍 Linear Search Questions
                                                         ----------------------------------------
             A search algorithm that checks each element in the list one by one until the target is found or the list ends.


(1) Find Element in Array?

input :
int [] arr = {4, 2, 7, 9, 1};
int tar = 7;
output: 2

(2) Count Occurrences of Target ?

input :
int [] arr = {5, 2, 5, 6, 5};
int tar = 5;
output: 3

(3) Find First Even Number?

input :
int [] arr = {3, 7, 9, 6, 1};
output: 6

(4) Find Index of Character in String?

input :
String str = "hello";
char tar = 'l';
output : 2 (first occurrence)

(5)  Check Element Exists or Not ?

input : 
int [] arr = {10, 20, 30, 40};
int tar = 25;
output: false

                                       ⚡ Binary Search Questions (Array must be sorted) 
                                  ----------------------------------------------------------------------------

             A search algorithm that repeatedly divides a sorted list  by half again and again until the number is found.

(1) Find Element in Sorted Array ?

input : 
int [] arr = {1, 3, 5, 7, 9};
int tar = 5;
output: 2

(2) Find First Occurrence of Element ?

input : 
int [] arr = {2, 4, 4, 4, 6};
int tar = 4;
output: 1

(3) Find Last Occurrence of Element ?

input : 
int [] arr = {2, 4, 4, 4, 6};
int tar = 4;
output: 3

(4) Find Floor of a Number (Floor = greatest element ≤ target)?

input : 
int [] arr = {1, 2, 8, 10, 11, 12, 19};
int tar = 5;
output: 2

(5) Find Ceiling of a Number (Ceiling = smallest element ≥ target)?

input : 
int [] arr = {1, 2, 8, 10, 11, 12, 19};
int tar = 5;
output: 8





