âœ… Core HashSet / Set Methods You Should Know:

| Category   | Method                              | Purpose                                  |
| ---------- | ----------------------------------- | ---------------------------------------- |
| Add        | `add(E e)`                          | Add element to the set                   |
| Bulk add   | `addAll(Collection<? extends E> c)` | Add all elements from another collection |
| Remove     | `remove(Object o)`                  | Remove specific element                  |
| Remove all | `removeAll(Collection<?> c)`        | Remove all matching elements             |
| Retain     | `retainAll(Collection<?> c)`        | Keep only common elements                |
| Contains   | `contains(Object o)`                | Check if element exists                  |
| Size       | `size()`                            | Number of elements                       |
| Is empty   | `isEmpty()`                         | Check if set is empty                    |
| Clear      | `clear()`                           | Remove all elements                      |
| To array   | `toArray()`                         | Convert set to array                     |
| Clone      | `clone()` *(only in HashSet)*       | Shallow copy                             |
| Equals     | `equals(Object o)`                  | Check if two sets are equal              |
| HashCode   | `hashCode()`                        | Hash code for use in maps/sets           |
| Iterator   | `iterator()`                        | Traverse elements                        |
| Stream     | `stream()`                          | Java 8+ Stream support                   |

âœ… TreeSet Specific Features:
| Category         | Method                                               | Purpose                                |
| ---------------- | ---------------------------------------------------- | -------------------------------------- |
| Sorted Access    | `first()` / `last()`                                 | Get smallest/largest element           |
| Range Queries    | `headSet(to)` / `tailSet(from)` / `subSet(from, to)` | Get elements in range                  |
| Closest Match    | `ceiling(e)` / `floor(e)`                            | Nearest equal or greater/smaller value |
| Remove           | `pollFirst()` / `pollLast()`                         | Remove and return first/last element   |
| Comparator       | `comparator()`                                       | Get custom comparator if used          |
| Reverse Order    | `descendingIterator()` / `descendingSet()`           | Get reverse view                       |
| Sorted Insertion | Automatic                                            | Keeps elements sorted                  |
| Custom Order     | `new TreeSet<>(Comparator)`                          | Custom sorting logic                   |

âœ… Collections Class Utilities (Also Work with Sets):
| Method                          | Purpose                                                              |
| ------------------------------- | -------------------------------------------------------------------- |
| `Collections.frequency()`       | Count how many times element appears (though less relevant for sets) |
| `Collections.disjoint()`        | Check if two collections have no elements in common                  |
| `Collections.unmodifiableSet()` | Create immutable view                                                |
| `Collections.singleton()`       | Create set with a single element                                     |




                                                                          âœ… HashSet Questions
----------------------------------------------------------------------------------------------------------------------------------------------------------------

ðŸŸ¢ Easy
***********

(1) Write a Java program to create a HashSet, add elements to it, and print all the elements.?
Input: "Apple", "Banana", "Mango", "Orange"
Output: [Banana, Apple, Orange, Mango]

(2) Write a Java program to check if a specific element exists in a HashSet.?
Input: "Apple", "Banana", "Mango", "Orange"
String tar = "Mango"
Output: Element exists in the HashSet

(3) Write a Java program to remove a specific element from a HashSet.?
Input: "Apple", "Banana", "Mango", "Orange"
String tar= "Banana"
Output: [Apple, Mango, Orange]

(4) How to get the size (number of elements) of a HashSet in Java?
Input: 
HashSet<String> fruits = new HashSet<>();
fruits.add("Apple");
fruits.add("Banana");
fruits.add("Mango");
Output: 3

(5) How to convert a HashSet to an ArrayList in Java?
Input:
HashSet<String> set = new HashSet<>();
set.add("Apple");
set.add("Banana");
set.add("Mango");
Output: 
ArrayList: [Apple, Banana, Mango]

(6) How to add all elements from another collection to a HashSet in Java?
Input:
HashSet<String> set1 = new HashSet<>();
set1.add("Apple");
set1.add("Banana");
ArrayList<String> list = new ArrayList<>();
list.add("Mango");
list.add("Orange");
Output: 
Updated HashSet: [Banana, Apple, Mango, Orange]

(7) How to clear all elements from a HashSet in Java?
Input: 
HashSet<String> set = new HashSet<>();
set.add("Java");
set.add("Python");
set.add("C++");
Output:
Before clear: [Java, Python, C++]
After clear: []

(8) How to check if a HashSet is empty in Java?
Input:
HashSet<String> set = new HashSet<>();
Output: The HashSet is empty.

(9) How to convert a HashSet to an array in Java?
Input:
HashSet<String> set = new HashSet<>();
set.add("apple");
set.add("banana");
set.add("orange");
Output: banana orange apple 



ðŸŸ¡ Medium
**************

(1) How to remove duplicates from an array using HashSet in Java?
Input:
int[] arr = {1, 2, 2, 3, 4, 4, 5};
Output: [1, 2, 3, 4, 5]

(2) How to find the intersection of two arrays using HashSet in Java?
Input:
int[] arr1 = {1, 2, 3, 4, 5};
int[] arr2 = {3, 4, 5, 6, 7};
Output: [3, 4, 5]

(3) Write a Java program to count the number of unique characters present in a given string.?
Input: 
String str = "hello";
Output: 4

(4) Write a program to check if two HashSets contain the same elements.?
Input:
HashSet<Integer> set1 = new HashSet<>(Arrays.asList(1, 2, 3));  
HashSet<Integer> set2 = new HashSet<>(Arrays.asList(1, 2, 4));
Output: Are both HashSets equal? false

(5) Write a Java program to filter out all even numbers from a HashSet and store them in a new HashSet ?
Input:
HashSet<Integer> numbers = new HashSet<>(Arrays.asList(10, 15, 20, 25, 30, 35));
Output: Filtered even numbers: [10, 20, 30]

(6) Find union and difference between two sets. ?
Input:
Set<Integer> set1 = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));
Set<Integer> set2 = new HashSet<>(Arrays.asList(4, 5, 6, 7, 8));
Output:
Union: [1, 2, 3, 4, 5, 6, 7, 8]
Difference (set1 - set2): [1, 2, 3]
Difference (set2 - set1): [6, 7, 8]



Check if a list has any duplicates.

Count distinct words in a sentence.

Generate all unique pairs from an array.

Create a custom class and override equals() and hashCode() to work in HashSet.

ðŸ”´ Hard
Detect cycle in a graph using HashSet.

Find all subsets of a set (power set).

Group anagrams using HashSet.

Longest consecutive sequence using HashSet.

Word break problem using HashSet dictionary.

Find all unique triplets that sum to zero.

Remove duplicates from a stream of integers.

Find elements that appear exactly once in an array.

Implement custom Set behavior using HashSet as base.

Track unique visitors in a high-throughput system.

âœ… LinkedHashSet Questions
ðŸŸ¢ Easy
Create a LinkedHashSet and add elements.

Observe insertion order in LinkedHashSet.

Remove element and maintain order.

Iterate using iterator.

Clone a LinkedHashSet.

Convert LinkedHashSet to ArrayList.

Use contains() to check for existence.

Remove all elements.

Convert list to LinkedHashSet to remove duplicates while keeping order.

Check if set contains all elements from another set.

ðŸŸ¡ Medium
Merge two lists without duplicates using LinkedHashSet.

Track recently visited pages using LinkedHashSet.

Implement custom LRU cache using LinkedHashSet.

Preserve order of first appearance from a stream.

Count and preserve first non-repeating characters.

Remove duplicates from a string while keeping order.

Simulate cache with max capacity using LinkedHashSet.

Convert ordered list of values into a unique linked set.

Track event logs in order without repetition.

Build a playlist without repeating songs and in original order.

ðŸ”´ Hard
Implement basic LRU using LinkedHashSet + capacity check.

Combine unique characters from two strings, preserving first appearance.

Build an autocomplete list from ordered user input history.

Preserve order of first unique substring in stream.

Implement a simple memory cache with expiry logic.

Detect first non-repeating character in a stream.

Optimize storage for frequent lookup of recent inputs.

Track browsing history with forward/back tracking using LinkedHashSet.

Remove duplicates from large data set with minimal memory and order preservation.

Use LinkedHashSet to model "unique navigation path" in UI testing.

âœ… TreeSet Questions
ðŸŸ¢ Easy
Add elements to a TreeSet and print (observe sorting).

Remove elements from a TreeSet.

Use first() and last() methods.

Check if an element exists.

Iterate in sorted order.

Get size and clear the set.

Convert array to TreeSet.

Add duplicate values and observe behavior.

Use ceiling() and floor() methods.

Print elements in descending order using descendingIterator().

ðŸŸ¡ Medium
Store and sort strings by length using custom comparator.

Find closest value greater than or equal to a target.

Implement leaderboard using TreeSet.

Store custom objects with sorted order (e.g., students by marks).

Maintain sorted log of access timestamps.

Use subSet() to get a range.

Track top 5 scores in real-time.

Simulate event queue sorted by time.

Build sorted list of words from a file.

Implement task priority handler using TreeSet.

ðŸ”´ Hard
Merge multiple sorted arrays using TreeSet.

Design price tracker with automatic sorting and duplicate skip.

Use TreeSet for range sum queries.

Remove all elements below a threshold.

Maintain rolling sorted window of elements.

Design auto-suggest sorted word system.

Real-time stock ticker sorted by price.

Custom object sorting by multiple fields (e.g., name, then ID).

Implement interval tree logic with TreeSet.

Simulate a min priority queue with dynamic priority updates.

